
BuildYourCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000fec  00001080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080007c  0080007c  0000109c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002042  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e98  00000000  00000000  00003372  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015b2  00000000  00000000  0000420a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004cc  00000000  00000000  000057bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008cc  00000000  00000000  00005c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000157b  00000000  00000000  00006554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00007acf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__vector_7>
  20:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__vector_8>
  24:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__vector_9>
  28:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
  8a:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KEYPAD_u8Init>:
  92:	42 e0       	ldi	r20, 0x02	; 2
  94:	65 e0       	ldi	r22, 0x05	; 5
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_u8SetPinDirection>
  9c:	42 e0       	ldi	r20, 0x02	; 2
  9e:	66 e0       	ldi	r22, 0x06	; 6
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_u8SetPinDirection>
  a6:	42 e0       	ldi	r20, 0x02	; 2
  a8:	67 e0       	ldi	r22, 0x07	; 7
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_u8SetPinDirection>
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	62 e0       	ldi	r22, 0x02	; 2
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_u8SetPinDirection>
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	63 e0       	ldi	r22, 0x03	; 3
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_u8SetPinDirection>
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	64 e0       	ldi	r22, 0x04	; 4
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_u8SetPinDirection>
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	65 e0       	ldi	r22, 0x05	; 5
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPinData>
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	66 e0       	ldi	r22, 0x06	; 6
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPinData>
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	67 e0       	ldi	r22, 0x07	; 7
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPinData>
  ec:	08 95       	ret

000000ee <KEYPAD_u8GetPressedKey>:
  ee:	df 92       	push	r13
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	2a 97       	sbiw	r28, 0x0a	; 10
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
 10c:	7c 01       	movw	r14, r24
 10e:	99 e0       	ldi	r25, 0x09	; 9
 110:	e2 e7       	ldi	r30, 0x72	; 114
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	de 01       	movw	r26, r28
 116:	12 96       	adiw	r26, 0x02	; 2
 118:	01 90       	ld	r0, Z+
 11a:	0d 92       	st	X+, r0
 11c:	9a 95       	dec	r25
 11e:	e1 f7       	brne	.-8      	; 0x118 <KEYPAD_u8GetPressedKey+0x2a>
 120:	e1 14       	cp	r14, r1
 122:	f1 04       	cpc	r15, r1
 124:	b9 f5       	brne	.+110    	; 0x194 <KEYPAD_u8GetPressedKey+0xa6>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	3d c0       	rjmp	.+122    	; 0x1a4 <KEYPAD_u8GetPressedKey+0xb6>
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	60 2f       	mov	r22, r16
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPinData>
 134:	12 e0       	ldi	r17, 0x02	; 2
 136:	25 c0       	rjmp	.+74     	; 0x182 <KEYPAD_u8GetPressedKey+0x94>
 138:	ae 01       	movw	r20, r28
 13a:	4f 5f       	subi	r20, 0xFF	; 255
 13c:	5f 4f       	sbci	r21, 0xFF	; 255
 13e:	61 2f       	mov	r22, r17
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_u8GetPinData>
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	81 11       	cpse	r24, r1
 14a:	1a c0       	rjmp	.+52     	; 0x180 <KEYPAD_u8GetPressedKey+0x92>
 14c:	21 2f       	mov	r18, r17
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	22 50       	subi	r18, 0x02	; 2
 152:	31 09       	sbc	r19, r1
 154:	80 2f       	mov	r24, r16
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	05 97       	sbiw	r24, 0x05	; 5
 15a:	a9 01       	movw	r20, r18
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	24 0f       	add	r18, r20
 162:	35 1f       	adc	r19, r21
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	4c 0f       	add	r20, r28
 16a:	5d 1f       	adc	r21, r29
 16c:	24 0f       	add	r18, r20
 16e:	35 1f       	adc	r19, r21
 170:	f9 01       	movw	r30, r18
 172:	e8 0f       	add	r30, r24
 174:	f9 1f       	adc	r31, r25
 176:	d1 80       	ldd	r13, Z+1	; 0x01
 178:	8a e0       	ldi	r24, 0x0A	; 10
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 b7 01 	call	0x36e	; 0x36e <TIMER0_u8Delay>
 180:	1f 5f       	subi	r17, 0xFF	; 255
 182:	15 30       	cpi	r17, 0x05	; 5
 184:	c8 f2       	brcs	.-78     	; 0x138 <KEYPAD_u8GetPressedKey+0x4a>
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	60 2f       	mov	r22, r16
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPinData>
 190:	0f 5f       	subi	r16, 0xFF	; 255
 192:	03 c0       	rjmp	.+6      	; 0x19a <KEYPAD_u8GetPressedKey+0xac>
 194:	05 e0       	ldi	r16, 0x05	; 5
 196:	dd 24       	eor	r13, r13
 198:	da 94       	dec	r13
 19a:	08 30       	cpi	r16, 0x08	; 8
 19c:	30 f2       	brcs	.-116    	; 0x12a <KEYPAD_u8GetPressedKey+0x3c>
 19e:	f7 01       	movw	r30, r14
 1a0:	d0 82       	st	Z, r13
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	2a 96       	adiw	r28, 0x0a	; 10
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	ff 90       	pop	r15
 1ba:	ef 90       	pop	r14
 1bc:	df 90       	pop	r13
 1be:	08 95       	ret

000001c0 <LED_u8Init>:
 1c0:	42 e0       	ldi	r20, 0x02	; 2
 1c2:	69 2f       	mov	r22, r25
 1c4:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_u8SetPinDirection>
 1c8:	08 95       	ret

000001ca <LED_u8On>:
 1ca:	41 e0       	ldi	r20, 0x01	; 1
 1cc:	69 2f       	mov	r22, r25
 1ce:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPinData>
 1d2:	08 95       	ret

000001d4 <LED_u8Off>:
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	69 2f       	mov	r22, r25
 1d8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPinData>
 1dc:	08 95       	ret

000001de <MOTOR_init>:
 1de:	ff 92       	push	r15
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	00 d0       	rcall	.+0      	; 0x1ea <MOTOR_init+0xc>
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	8c 01       	movw	r16, r24
 1f0:	fc 01       	movw	r30, r24
 1f2:	80 81       	ld	r24, Z
 1f4:	89 83       	std	Y+1, r24	; 0x01
 1f6:	93 81       	ldd	r25, Z+3	; 0x03
 1f8:	9a 83       	std	Y+2, r25	; 0x02
 1fa:	61 81       	ldd	r22, Z+1	; 0x01
 1fc:	42 e0       	ldi	r20, 0x02	; 2
 1fe:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_u8SetPinDirection>
 202:	f8 2e       	mov	r15, r24
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	8f 13       	cpse	r24, r31
 208:	07 c0       	rjmp	.+14     	; 0x218 <MOTOR_init+0x3a>
 20a:	f8 01       	movw	r30, r16
 20c:	62 81       	ldd	r22, Z+2	; 0x02
 20e:	42 e0       	ldi	r20, 0x02	; 2
 210:	80 81       	ld	r24, Z
 212:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_u8SetPinDirection>
 216:	f8 2e       	mov	r15, r24
 218:	f1 e0       	ldi	r31, 0x01	; 1
 21a:	ff 12       	cpse	r15, r31
 21c:	07 c0       	rjmp	.+14     	; 0x22c <MOTOR_init+0x4e>
 21e:	f8 01       	movw	r30, r16
 220:	63 81       	ldd	r22, Z+3	; 0x03
 222:	42 e0       	ldi	r20, 0x02	; 2
 224:	80 81       	ld	r24, Z
 226:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_u8SetPinDirection>
 22a:	f8 2e       	mov	r15, r24
 22c:	be 01       	movw	r22, r28
 22e:	6f 5f       	subi	r22, 0xFF	; 255
 230:	7f 4f       	sbci	r23, 0xFF	; 255
 232:	f8 01       	movw	r30, r16
 234:	84 81       	ldd	r24, Z+4	; 0x04
 236:	0e 94 02 04 	call	0x804	; 0x804 <PWM_u8Init>
 23a:	8f 2d       	mov	r24, r15
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	08 95       	ret

0000024c <MOTOR_Move>:
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	00 97       	sbiw	r24, 0x00	; 0
 254:	69 f1       	breq	.+90     	; 0x2b0 <MOTOR_Move+0x64>
 256:	66 23       	and	r22, r22
 258:	69 f1       	breq	.+90     	; 0x2b4 <MOTOR_Move+0x68>
 25a:	64 36       	cpi	r22, 0x64	; 100
 25c:	68 f5       	brcc	.+90     	; 0x2b8 <MOTOR_Move+0x6c>
 25e:	16 2f       	mov	r17, r22
 260:	ec 01       	movw	r28, r24
 262:	44 23       	and	r20, r20
 264:	19 f0       	breq	.+6      	; 0x26c <MOTOR_Move+0x20>
 266:	41 30       	cpi	r20, 0x01	; 1
 268:	91 f0       	breq	.+36     	; 0x28e <MOTOR_Move+0x42>
 26a:	28 c0       	rjmp	.+80     	; 0x2bc <MOTOR_Move+0x70>
 26c:	69 81       	ldd	r22, Y+1	; 0x01
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	88 81       	ld	r24, Y
 272:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPinData>
 276:	6a 81       	ldd	r22, Y+2	; 0x02
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	88 81       	ld	r24, Y
 27c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPinData>
 280:	61 2f       	mov	r22, r17
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	8c 81       	ldd	r24, Y+4	; 0x04
 286:	0e 94 1b 04 	call	0x836	; 0x836 <PWM_u8DutyCycle>
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	18 c0       	rjmp	.+48     	; 0x2be <MOTOR_Move+0x72>
 28e:	69 81       	ldd	r22, Y+1	; 0x01
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	88 81       	ld	r24, Y
 294:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPinData>
 298:	6a 81       	ldd	r22, Y+2	; 0x02
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	88 81       	ld	r24, Y
 29e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPinData>
 2a2:	61 2f       	mov	r22, r17
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	8c 81       	ldd	r24, Y+4	; 0x04
 2a8:	0e 94 1b 04 	call	0x836	; 0x836 <PWM_u8DutyCycle>
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	07 c0       	rjmp	.+14     	; 0x2be <MOTOR_Move+0x72>
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	05 c0       	rjmp	.+10     	; 0x2be <MOTOR_Move+0x72>
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <MOTOR_Move+0x72>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	01 c0       	rjmp	.+2      	; 0x2be <MOTOR_Move+0x72>
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	08 95       	ret

000002c6 <MOTOR_Stop>:
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	00 97       	sbiw	r24, 0x00	; 0
 2cc:	69 f0       	breq	.+26     	; 0x2e8 <MOTOR_Stop+0x22>
 2ce:	ec 01       	movw	r28, r24
 2d0:	69 81       	ldd	r22, Y+1	; 0x01
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	88 81       	ld	r24, Y
 2d6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPinData>
 2da:	6a 81       	ldd	r22, Y+2	; 0x02
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	88 81       	ld	r24, Y
 2e0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPinData>
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <MOTOR_Stop+0x24>
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <main>:
#include "SERVICE/UI/UI_interface.h"
#define OFF 0
#define ON  1

int main ()
{
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	1f 92       	push	r1
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
	uint8_t KeyState;
	uint8_t MOTION_STATE = MODE1;
	LED_t LED0 = {PORTB, PIN5};
	LED_u8Init(LED0);
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	95 e0       	ldi	r25, 0x05	; 5
 2fe:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LED_u8Init>
	DRIVE_u8Init();
 302:	0e 94 4b 05 	call	0xa96	; 0xa96 <DRIVE_u8Init>
	UI_Init();
 306:	0e 94 d5 05 	call	0xbaa	; 0xbaa <UI_Init>
	KEYPAD_u8Init();
 30a:	0e 94 49 00 	call	0x92	; 0x92 <KEYPAD_u8Init>
#define ON  1

int main ()
{
	uint8_t KeyState;
	uint8_t MOTION_STATE = MODE1;
 30e:	10 e0       	ldi	r17, 0x00	; 0
	UI_Init();
	KEYPAD_u8Init();

	while (1)
	{
		UI_GetKeyPressed(&KeyState);    // get which key is pressed 
 310:	ce 01       	movw	r24, r28
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <UI_GetKeyPressed>
		if ( KeyState== MOVE_KEY )				// if move button pressed 
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	21 f4       	brne	.+8      	; 0x326 <main+0x36>
		{
			DRIVE_u8Mode(MOTION_STATE);			// move with last motion mode 
 31e:	81 2f       	mov	r24, r17
 320:	0e 94 74 05 	call	0xae8	; 0xae8 <DRIVE_u8Mode>
 324:	f5 cf       	rjmp	.-22     	; 0x310 <main+0x20>
		}

		else if( KeyState== RIGHT_KEY )		// if right button pressed 
 326:	86 30       	cpi	r24, 0x06	; 6
 328:	19 f4       	brne	.+6      	; 0x330 <main+0x40>
		{
			DRIVE_u8Right();		// rotate right 
 32a:	0e 94 56 05 	call	0xaac	; 0xaac <DRIVE_u8Right>
 32e:	f0 cf       	rjmp	.-32     	; 0x310 <main+0x20>
		}

		else if ( KeyState == LEFT_KEY )		// if left button pressed 
 330:	84 30       	cpi	r24, 0x04	; 4
 332:	19 f4       	brne	.+6      	; 0x33a <main+0x4a>
		{
			DRIVE_u8Left();			// rotate left 
 334:	0e 94 65 05 	call	0xaca	; 0xaca <DRIVE_u8Left>
 338:	eb cf       	rjmp	.-42     	; 0x310 <main+0x20>
		}

		else if ( KeyState == MODE_KEY )		// change mode button pressed 
 33a:	85 30       	cpi	r24, 0x05	; 5
 33c:	81 f4       	brne	.+32     	; 0x35e <main+0x6e>
		{
			MOTION_STATE++;			// update mode 
 33e:	1f 5f       	subi	r17, 0xFF	; 255
			while ( KeyState == MODE_KEY )		// stay here if still pressed 
 340:	04 c0       	rjmp	.+8      	; 0x34a <main+0x5a>
			{
				UI_GetKeyPressed(&KeyState);
 342:	ce 01       	movw	r24, r28
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <UI_GetKeyPressed>
		}

		else if ( KeyState == MODE_KEY )		// change mode button pressed 
		{
			MOTION_STATE++;			// update mode 
			while ( KeyState == MODE_KEY )		// stay here if still pressed 
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	85 30       	cpi	r24, 0x05	; 5
 34e:	c9 f3       	breq	.-14     	; 0x342 <main+0x52>
			{
				UI_GetKeyPressed(&KeyState);
			}
			if (MOTION_STATE==5)	// if car reached to the last mode 
 350:	15 30       	cpi	r17, 0x05	; 5
 352:	09 f4       	brne	.+2      	; 0x356 <main+0x66>
			{
				MOTION_STATE = MODE2;		// back to  this mode 
 354:	11 e0       	ldi	r17, 0x01	; 1
			}
			UI_SetLedModuleState(MOTION_STATE);	   // turn led indicator about motion mode 
 356:	81 2f       	mov	r24, r17
 358:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <UI_SetLedModuleState>
 35c:	d9 cf       	rjmp	.-78     	; 0x310 <main+0x20>

		}

		else{
			DRIVE_u8Mode(MODE1);		// stop the car  
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	0e 94 74 05 	call	0xae8	; 0xae8 <DRIVE_u8Mode>
 364:	d5 cf       	rjmp	.-86     	; 0x310 <main+0x20>

00000366 <TIMER0_u8Init>:
// variable used in interrupt to compare with delay 
static uint16_t volatile counter;

// function to initialize timer0  
uint8_t TIMER0_u8Init(void){
	TCCR0_REG = (1 << WGM01) | (1<<CS01) | (1 << CS00);	
 366:	8b e0       	ldi	r24, 0x0B	; 11
 368:	83 bf       	out	0x33, r24	; 51
	return 1;
}
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	08 95       	ret

0000036e <TIMER0_u8Delay>:

// function delay by timer0 
uint8_t TIMER0_u8Delay(uint16_t delay){
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	ec 01       	movw	r28, r24
	counter=0;							// reset counter to 0 
 374:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__data_end+0x1>
 378:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
	TIMER0_u8Init();					// initialize timer0  
 37c:	0e 94 b3 01 	call	0x366	; 0x366 <TIMER0_u8Init>
	OCR0_REG = (F_CPU / PRESCALER);		// set OCR0_REG value 
 380:	8d e7       	ldi	r24, 0x7D	; 125
 382:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TIMSK_REG, OCIE0);			// enable interrupt 
 384:	89 b7       	in	r24, 0x39	; 57
 386:	82 60       	ori	r24, 0x02	; 2
 388:	89 bf       	out	0x39, r24	; 57
	SET_BIT(SREG_REG, I_BIT);
 38a:	8f b7       	in	r24, 0x3f	; 63
 38c:	80 68       	ori	r24, 0x80	; 128
 38e:	8f bf       	out	0x3f, r24	; 63
	while (counter <= delay);			// stop if delay not finished 
 390:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 394:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
 398:	c8 17       	cp	r28, r24
 39a:	d9 07       	cpc	r29, r25
 39c:	c8 f7       	brcc	.-14     	; 0x390 <TIMER0_u8Delay+0x22>
	CLR_BIT(TIMSK_REG, OCIE0);			
 39e:	89 b7       	in	r24, 0x39	; 57
 3a0:	8d 7f       	andi	r24, 0xFD	; 253
 3a2:	89 bf       	out	0x39, r24	; 57
	return 1;
}
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <__vector_10>:

// increase counter eche interrupt 
void __vector_10(void){
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
	counter++;
 3ba:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 3be:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <__data_end+0x1>
 3c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
}
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <DIO_u8SetPinDirection>:
 3da:	68 30       	cpi	r22, 0x08	; 8
 3dc:	08 f0       	brcs	.+2      	; 0x3e0 <DIO_u8SetPinDirection+0x6>
 3de:	ea c0       	rjmp	.+468    	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
 3e0:	84 30       	cpi	r24, 0x04	; 4
 3e2:	08 f0       	brcs	.+2      	; 0x3e6 <DIO_u8SetPinDirection+0xc>
 3e4:	e9 c0       	rjmp	.+466    	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
 3e6:	81 30       	cpi	r24, 0x01	; 1
 3e8:	09 f4       	brne	.+2      	; 0x3ec <DIO_u8SetPinDirection+0x12>
 3ea:	3f c0       	rjmp	.+126    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 3ec:	38 f0       	brcs	.+14     	; 0x3fc <DIO_u8SetPinDirection+0x22>
 3ee:	82 30       	cpi	r24, 0x02	; 2
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <DIO_u8SetPinDirection+0x1a>
 3f2:	72 c0       	rjmp	.+228    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 3f4:	83 30       	cpi	r24, 0x03	; 3
 3f6:	09 f4       	brne	.+2      	; 0x3fa <DIO_u8SetPinDirection+0x20>
 3f8:	a6 c0       	rjmp	.+332    	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 3fa:	e0 c0       	rjmp	.+448    	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
 3fc:	41 30       	cpi	r20, 0x01	; 1
 3fe:	a9 f0       	breq	.+42     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 400:	18 f0       	brcs	.+6      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 402:	42 30       	cpi	r20, 0x02	; 2
 404:	31 f1       	breq	.+76     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 406:	dc c0       	rjmp	.+440    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
 408:	2a b3       	in	r18, 0x1a	; 26
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	80 95       	com	r24
 41a:	92 2f       	mov	r25, r18
 41c:	98 23       	and	r25, r24
 41e:	9a bb       	out	0x1a, r25	; 26
 420:	9b b3       	in	r25, 0x1b	; 27
 422:	89 23       	and	r24, r25
 424:	8b bb       	out	0x1b, r24	; 27
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	08 95       	ret
 42a:	80 b7       	in	r24, 0x30	; 48
 42c:	8b 7f       	andi	r24, 0xFB	; 251
 42e:	80 bf       	out	0x30, r24	; 48
 430:	2a b3       	in	r18, 0x1a	; 26
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 c0       	rjmp	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 440:	98 2f       	mov	r25, r24
 442:	90 95       	com	r25
 444:	92 23       	and	r25, r18
 446:	9a bb       	out	0x1a, r25	; 26
 448:	9b b3       	in	r25, 0x1b	; 27
 44a:	89 2b       	or	r24, r25
 44c:	8b bb       	out	0x1b, r24	; 27
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	08 95       	ret
 452:	2a b3       	in	r18, 0x1a	; 26
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	6a 95       	dec	r22
 460:	e2 f7       	brpl	.-8      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 462:	82 2b       	or	r24, r18
 464:	8a bb       	out	0x1a, r24	; 26
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	08 95       	ret
 46a:	41 30       	cpi	r20, 0x01	; 1
 46c:	a9 f0       	breq	.+42     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 46e:	18 f0       	brcs	.+6      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 470:	42 30       	cpi	r20, 0x02	; 2
 472:	31 f1       	breq	.+76     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 474:	a7 c0       	rjmp	.+334    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
 476:	27 b3       	in	r18, 0x17	; 23
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	6a 95       	dec	r22
 484:	e2 f7       	brpl	.-8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 486:	80 95       	com	r24
 488:	92 2f       	mov	r25, r18
 48a:	98 23       	and	r25, r24
 48c:	97 bb       	out	0x17, r25	; 23
 48e:	98 b3       	in	r25, 0x18	; 24
 490:	89 23       	and	r24, r25
 492:	88 bb       	out	0x18, r24	; 24
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	08 95       	ret
 498:	80 b7       	in	r24, 0x30	; 48
 49a:	8b 7f       	andi	r24, 0xFB	; 251
 49c:	80 bf       	out	0x30, r24	; 48
 49e:	27 b3       	in	r18, 0x17	; 23
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4ae:	98 2f       	mov	r25, r24
 4b0:	90 95       	com	r25
 4b2:	92 23       	and	r25, r18
 4b4:	97 bb       	out	0x17, r25	; 23
 4b6:	98 b3       	in	r25, 0x18	; 24
 4b8:	89 2b       	or	r24, r25
 4ba:	88 bb       	out	0x18, r24	; 24
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	08 95       	ret
 4c0:	27 b3       	in	r18, 0x17	; 23
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4d0:	82 2b       	or	r24, r18
 4d2:	87 bb       	out	0x17, r24	; 23
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	08 95       	ret
 4d8:	41 30       	cpi	r20, 0x01	; 1
 4da:	a9 f0       	breq	.+42     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 4dc:	18 f0       	brcs	.+6      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4de:	42 30       	cpi	r20, 0x02	; 2
 4e0:	31 f1       	breq	.+76     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 4e2:	72 c0       	rjmp	.+228    	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
 4e4:	24 b3       	in	r18, 0x14	; 20
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	6a 95       	dec	r22
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4f4:	80 95       	com	r24
 4f6:	92 2f       	mov	r25, r18
 4f8:	98 23       	and	r25, r24
 4fa:	94 bb       	out	0x14, r25	; 20
 4fc:	95 b3       	in	r25, 0x15	; 21
 4fe:	89 23       	and	r24, r25
 500:	85 bb       	out	0x15, r24	; 21
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	08 95       	ret
 506:	80 b7       	in	r24, 0x30	; 48
 508:	8b 7f       	andi	r24, 0xFB	; 251
 50a:	80 bf       	out	0x30, r24	; 48
 50c:	24 b3       	in	r18, 0x14	; 20
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	6a 95       	dec	r22
 51a:	e2 f7       	brpl	.-8      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 51c:	98 2f       	mov	r25, r24
 51e:	90 95       	com	r25
 520:	92 23       	and	r25, r18
 522:	94 bb       	out	0x14, r25	; 20
 524:	95 b3       	in	r25, 0x15	; 21
 526:	89 2b       	or	r24, r25
 528:	85 bb       	out	0x15, r24	; 21
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	08 95       	ret
 52e:	24 b3       	in	r18, 0x14	; 20
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 c0       	rjmp	.+4      	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	6a 95       	dec	r22
 53c:	e2 f7       	brpl	.-8      	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 53e:	82 2b       	or	r24, r18
 540:	84 bb       	out	0x14, r24	; 20
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	08 95       	ret
 546:	41 30       	cpi	r20, 0x01	; 1
 548:	a9 f0       	breq	.+42     	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
 54a:	18 f0       	brcs	.+6      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
 54c:	42 30       	cpi	r20, 0x02	; 2
 54e:	31 f1       	breq	.+76     	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 550:	3d c0       	rjmp	.+122    	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
 552:	21 b3       	in	r18, 0x11	; 17
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	6a 95       	dec	r22
 560:	e2 f7       	brpl	.-8      	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 562:	80 95       	com	r24
 564:	92 2f       	mov	r25, r18
 566:	98 23       	and	r25, r24
 568:	91 bb       	out	0x11, r25	; 17
 56a:	9b b3       	in	r25, 0x1b	; 27
 56c:	89 23       	and	r24, r25
 56e:	8b bb       	out	0x1b, r24	; 27
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	08 95       	ret
 574:	80 b7       	in	r24, 0x30	; 48
 576:	8b 7f       	andi	r24, 0xFB	; 251
 578:	80 bf       	out	0x30, r24	; 48
 57a:	21 b3       	in	r18, 0x11	; 17
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	02 c0       	rjmp	.+4      	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	6a 95       	dec	r22
 588:	e2 f7       	brpl	.-8      	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
 58a:	98 2f       	mov	r25, r24
 58c:	90 95       	com	r25
 58e:	92 23       	and	r25, r18
 590:	91 bb       	out	0x11, r25	; 17
 592:	92 b3       	in	r25, 0x12	; 18
 594:	89 2b       	or	r24, r25
 596:	82 bb       	out	0x12, r24	; 18
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	08 95       	ret
 59c:	21 b3       	in	r18, 0x11	; 17
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	6a 95       	dec	r22
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 5ac:	82 2b       	or	r24, r18
 5ae:	81 bb       	out	0x11, r24	; 17
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	08 95       	ret
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	08 95       	ret
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	08 95       	ret
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	08 95       	ret
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	08 95       	ret
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	08 95       	ret
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	08 95       	ret
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	08 95       	ret

000005d0 <DIO_u8SetPinData>:
 5d0:	68 30       	cpi	r22, 0x08	; 8
 5d2:	08 f0       	brcs	.+2      	; 0x5d6 <DIO_u8SetPinData+0x6>
 5d4:	80 c0       	rjmp	.+256    	; 0x6d6 <DIO_u8SetPinData+0x106>
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	31 f1       	breq	.+76     	; 0x626 <DIO_u8SetPinData+0x56>
 5da:	38 f0       	brcs	.+14     	; 0x5ea <DIO_u8SetPinData+0x1a>
 5dc:	82 30       	cpi	r24, 0x02	; 2
 5de:	09 f4       	brne	.+2      	; 0x5e2 <DIO_u8SetPinData+0x12>
 5e0:	40 c0       	rjmp	.+128    	; 0x662 <DIO_u8SetPinData+0x92>
 5e2:	83 30       	cpi	r24, 0x03	; 3
 5e4:	09 f4       	brne	.+2      	; 0x5e8 <DIO_u8SetPinData+0x18>
 5e6:	5a c0       	rjmp	.+180    	; 0x69c <DIO_u8SetPinData+0xcc>
 5e8:	78 c0       	rjmp	.+240    	; 0x6da <DIO_u8SetPinData+0x10a>
 5ea:	44 23       	and	r20, r20
 5ec:	79 f0       	breq	.+30     	; 0x60c <DIO_u8SetPinData+0x3c>
 5ee:	41 30       	cpi	r20, 0x01	; 1
 5f0:	09 f0       	breq	.+2      	; 0x5f4 <DIO_u8SetPinData+0x24>
 5f2:	75 c0       	rjmp	.+234    	; 0x6de <DIO_u8SetPinData+0x10e>
 5f4:	2b b3       	in	r18, 0x1b	; 27
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_u8SetPinData+0x30>
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	6a 95       	dec	r22
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_u8SetPinData+0x2c>
 604:	82 2b       	or	r24, r18
 606:	8b bb       	out	0x1b, r24	; 27
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	08 95       	ret
 60c:	2b b3       	in	r18, 0x1b	; 27
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_u8SetPinData+0x48>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	6a 95       	dec	r22
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_u8SetPinData+0x44>
 61c:	80 95       	com	r24
 61e:	82 23       	and	r24, r18
 620:	8b bb       	out	0x1b, r24	; 27
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	08 95       	ret
 626:	44 23       	and	r20, r20
 628:	79 f0       	breq	.+30     	; 0x648 <DIO_u8SetPinData+0x78>
 62a:	41 30       	cpi	r20, 0x01	; 1
 62c:	09 f0       	breq	.+2      	; 0x630 <DIO_u8SetPinData+0x60>
 62e:	59 c0       	rjmp	.+178    	; 0x6e2 <DIO_u8SetPinData+0x112>
 630:	28 b3       	in	r18, 0x18	; 24
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_u8SetPinData+0x6c>
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	6a 95       	dec	r22
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_u8SetPinData+0x68>
 640:	82 2b       	or	r24, r18
 642:	88 bb       	out	0x18, r24	; 24
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	08 95       	ret
 648:	28 b3       	in	r18, 0x18	; 24
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	02 c0       	rjmp	.+4      	; 0x654 <DIO_u8SetPinData+0x84>
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	6a 95       	dec	r22
 656:	e2 f7       	brpl	.-8      	; 0x650 <DIO_u8SetPinData+0x80>
 658:	80 95       	com	r24
 65a:	82 23       	and	r24, r18
 65c:	88 bb       	out	0x18, r24	; 24
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	08 95       	ret
 662:	44 23       	and	r20, r20
 664:	71 f0       	breq	.+28     	; 0x682 <DIO_u8SetPinData+0xb2>
 666:	41 30       	cpi	r20, 0x01	; 1
 668:	f1 f5       	brne	.+124    	; 0x6e6 <DIO_u8SetPinData+0x116>
 66a:	25 b3       	in	r18, 0x15	; 21
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_u8SetPinData+0xa6>
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	6a 95       	dec	r22
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_u8SetPinData+0xa2>
 67a:	82 2b       	or	r24, r18
 67c:	85 bb       	out	0x15, r24	; 21
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	08 95       	ret
 682:	25 b3       	in	r18, 0x15	; 21
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_u8SetPinData+0xbe>
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	6a 95       	dec	r22
 690:	e2 f7       	brpl	.-8      	; 0x68a <DIO_u8SetPinData+0xba>
 692:	80 95       	com	r24
 694:	82 23       	and	r24, r18
 696:	85 bb       	out	0x15, r24	; 21
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	08 95       	ret
 69c:	44 23       	and	r20, r20
 69e:	71 f0       	breq	.+28     	; 0x6bc <DIO_u8SetPinData+0xec>
 6a0:	41 30       	cpi	r20, 0x01	; 1
 6a2:	19 f5       	brne	.+70     	; 0x6ea <DIO_u8SetPinData+0x11a>
 6a4:	22 b3       	in	r18, 0x12	; 18
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_u8SetPinData+0xe0>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	6a 95       	dec	r22
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_u8SetPinData+0xdc>
 6b4:	82 2b       	or	r24, r18
 6b6:	82 bb       	out	0x12, r24	; 18
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	08 95       	ret
 6bc:	22 b3       	in	r18, 0x12	; 18
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_u8SetPinData+0xf8>
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	6a 95       	dec	r22
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_u8SetPinData+0xf4>
 6cc:	80 95       	com	r24
 6ce:	82 23       	and	r24, r18
 6d0:	82 bb       	out	0x12, r24	; 18
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	08 95       	ret
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	08 95       	ret
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	08 95       	ret
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	08 95       	ret
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	08 95       	ret
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	08 95       	ret
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	08 95       	ret

000006ee <DIO_u8GetPinData>:
 6ee:	68 30       	cpi	r22, 0x08	; 8
 6f0:	d8 f5       	brcc	.+118    	; 0x768 <DIO_u8GetPinData+0x7a>
 6f2:	41 15       	cp	r20, r1
 6f4:	51 05       	cpc	r21, r1
 6f6:	d1 f1       	breq	.+116    	; 0x76c <DIO_u8GetPinData+0x7e>
 6f8:	81 30       	cpi	r24, 0x01	; 1
 6fa:	91 f0       	breq	.+36     	; 0x720 <DIO_u8GetPinData+0x32>
 6fc:	28 f0       	brcs	.+10     	; 0x708 <DIO_u8GetPinData+0x1a>
 6fe:	82 30       	cpi	r24, 0x02	; 2
 700:	d9 f0       	breq	.+54     	; 0x738 <DIO_u8GetPinData+0x4a>
 702:	83 30       	cpi	r24, 0x03	; 3
 704:	29 f1       	breq	.+74     	; 0x750 <DIO_u8GetPinData+0x62>
 706:	34 c0       	rjmp	.+104    	; 0x770 <DIO_u8GetPinData+0x82>
 708:	89 b3       	in	r24, 0x19	; 25
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_u8GetPinData+0x24>
 70e:	95 95       	asr	r25
 710:	87 95       	ror	r24
 712:	6a 95       	dec	r22
 714:	e2 f7       	brpl	.-8      	; 0x70e <DIO_u8GetPinData+0x20>
 716:	81 70       	andi	r24, 0x01	; 1
 718:	fa 01       	movw	r30, r20
 71a:	80 83       	st	Z, r24
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	08 95       	ret
 720:	86 b3       	in	r24, 0x16	; 22
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_u8GetPinData+0x3c>
 726:	95 95       	asr	r25
 728:	87 95       	ror	r24
 72a:	6a 95       	dec	r22
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_u8GetPinData+0x38>
 72e:	81 70       	andi	r24, 0x01	; 1
 730:	fa 01       	movw	r30, r20
 732:	80 83       	st	Z, r24
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	08 95       	ret
 738:	83 b3       	in	r24, 0x13	; 19
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_u8GetPinData+0x54>
 73e:	95 95       	asr	r25
 740:	87 95       	ror	r24
 742:	6a 95       	dec	r22
 744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_u8GetPinData+0x50>
 746:	81 70       	andi	r24, 0x01	; 1
 748:	fa 01       	movw	r30, r20
 74a:	80 83       	st	Z, r24
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	08 95       	ret
 750:	80 b3       	in	r24, 0x10	; 16
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_u8GetPinData+0x6c>
 756:	95 95       	asr	r25
 758:	87 95       	ror	r24
 75a:	6a 95       	dec	r22
 75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_u8GetPinData+0x68>
 75e:	81 70       	andi	r24, 0x01	; 1
 760:	fa 01       	movw	r30, r20
 762:	80 83       	st	Z, r24
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	08 95       	ret
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	08 95       	ret
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	08 95       	ret
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	08 95       	ret

00000774 <DIO_u8TogglePinData>:
 774:	81 30       	cpi	r24, 0x01	; 1
 776:	91 f0       	breq	.+36     	; 0x79c <DIO_u8TogglePinData+0x28>
 778:	28 f0       	brcs	.+10     	; 0x784 <DIO_u8TogglePinData+0x10>
 77a:	82 30       	cpi	r24, 0x02	; 2
 77c:	d9 f0       	breq	.+54     	; 0x7b4 <DIO_u8TogglePinData+0x40>
 77e:	83 30       	cpi	r24, 0x03	; 3
 780:	29 f1       	breq	.+74     	; 0x7cc <DIO_u8TogglePinData+0x58>
 782:	30 c0       	rjmp	.+96     	; 0x7e4 <DIO_u8TogglePinData+0x70>
 784:	2b b3       	in	r18, 0x1b	; 27
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	02 c0       	rjmp	.+4      	; 0x790 <DIO_u8TogglePinData+0x1c>
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	6a 95       	dec	r22
 792:	e2 f7       	brpl	.-8      	; 0x78c <DIO_u8TogglePinData+0x18>
 794:	82 27       	eor	r24, r18
 796:	8b bb       	out	0x1b, r24	; 27
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	08 95       	ret
 79c:	28 b3       	in	r18, 0x18	; 24
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <DIO_u8TogglePinData+0x34>
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	6a 95       	dec	r22
 7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <DIO_u8TogglePinData+0x30>
 7ac:	82 27       	eor	r24, r18
 7ae:	88 bb       	out	0x18, r24	; 24
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	08 95       	ret
 7b4:	25 b3       	in	r18, 0x15	; 21
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <DIO_u8TogglePinData+0x4c>
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	6a 95       	dec	r22
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <DIO_u8TogglePinData+0x48>
 7c4:	82 27       	eor	r24, r18
 7c6:	85 bb       	out	0x15, r24	; 21
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	08 95       	ret
 7cc:	22 b3       	in	r18, 0x12	; 18
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_u8TogglePinData+0x64>
 7d4:	88 0f       	add	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	6a 95       	dec	r22
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_u8TogglePinData+0x60>
 7dc:	82 27       	eor	r24, r18
 7de:	82 bb       	out	0x12, r24	; 18
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	08 95       	ret
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	08 95       	ret

000007e8 <channelA_callBack>:
 7e8:	e0 e8       	ldi	r30, 0x80	; 128
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	61 81       	ldd	r22, Z+1	; 0x01
 7ee:	80 81       	ld	r24, Z
 7f0:	0e 94 ba 03 	call	0x774	; 0x774 <DIO_u8TogglePinData>
 7f4:	08 95       	ret

000007f6 <channelB_callBack>:
 7f6:	ee e7       	ldi	r30, 0x7E	; 126
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	61 81       	ldd	r22, Z+1	; 0x01
 7fc:	80 81       	ld	r24, Z
 7fe:	0e 94 ba 03 	call	0x774	; 0x774 <DIO_u8TogglePinData>
 802:	08 95       	ret

00000804 <PWM_u8Init>:
 804:	88 23       	and	r24, r24
 806:	19 f0       	breq	.+6      	; 0x80e <PWM_u8Init+0xa>
 808:	81 30       	cpi	r24, 0x01	; 1
 80a:	49 f0       	breq	.+18     	; 0x81e <PWM_u8Init+0x1a>
 80c:	12 c0       	rjmp	.+36     	; 0x832 <PWM_u8Init+0x2e>
 80e:	fb 01       	movw	r30, r22
 810:	80 81       	ld	r24, Z
 812:	91 81       	ldd	r25, Z+1	; 0x01
 814:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <PWM1+0x1>
 818:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <PWM1>
 81c:	07 c0       	rjmp	.+14     	; 0x82c <PWM_u8Init+0x28>
 81e:	fb 01       	movw	r30, r22
 820:	80 81       	ld	r24, Z
 822:	91 81       	ldd	r25, Z+1	; 0x01
 824:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <PWM2+0x1>
 828:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <PWM2>
 82c:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <TIMER1_u8Init>
 830:	08 95       	ret
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	08 95       	ret

00000836 <PWM_u8DutyCycle>:
 836:	cf 92       	push	r12
 838:	df 92       	push	r13
 83a:	ef 92       	push	r14
 83c:	ff 92       	push	r15
 83e:	cf 93       	push	r28
 840:	c8 2f       	mov	r28, r24
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__floatunsisf>
 84a:	20 e0       	ldi	r18, 0x00	; 0
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	40 e8       	ldi	r20, 0x80	; 128
 850:	53 e4       	ldi	r21, 0x43	; 67
 852:	0e 94 87 07 	call	0xf0e	; 0xf0e <__mulsf3>
 856:	20 e0       	ldi	r18, 0x00	; 0
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	48 ec       	ldi	r20, 0xC8	; 200
 85c:	52 e4       	ldi	r21, 0x42	; 66
 85e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__divsf3>
 862:	0e 94 ca 06 	call	0xd94	; 0xd94 <__fixunssfsi>
 866:	6b 01       	movw	r12, r22
 868:	7c 01       	movw	r14, r24
 86a:	cc 23       	and	r28, r28
 86c:	19 f0       	breq	.+6      	; 0x874 <__stack+0x15>
 86e:	c1 30       	cpi	r28, 0x01	; 1
 870:	a9 f0       	breq	.+42     	; 0x89c <__stack+0x3d>
 872:	2a c0       	rjmp	.+84     	; 0x8c8 <__stack+0x69>
 874:	e0 e8       	ldi	r30, 0x80	; 128
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	61 81       	ldd	r22, Z+1	; 0x01
 87a:	41 e0       	ldi	r20, 0x01	; 1
 87c:	80 81       	ld	r24, Z
 87e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPinData>
 882:	8c 2f       	mov	r24, r28
 884:	0e 94 ac 04 	call	0x958	; 0x958 <TIMER1_u8StopChannel>
 888:	b6 01       	movw	r22, r12
 88a:	8c 2f       	mov	r24, r28
 88c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <TIMER1_u8SetComapre>
 890:	64 ef       	ldi	r22, 0xF4	; 244
 892:	73 e0       	ldi	r23, 0x03	; 3
 894:	8c 2f       	mov	r24, r28
 896:	0e 94 89 04 	call	0x912	; 0x912 <TIMER1_u8SetChannelInterrupt>
 89a:	13 c0       	rjmp	.+38     	; 0x8c2 <__stack+0x63>
 89c:	ee e7       	ldi	r30, 0x7E	; 126
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	61 81       	ldd	r22, Z+1	; 0x01
 8a2:	41 e0       	ldi	r20, 0x01	; 1
 8a4:	80 81       	ld	r24, Z
 8a6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPinData>
 8aa:	8c 2f       	mov	r24, r28
 8ac:	0e 94 ac 04 	call	0x958	; 0x958 <TIMER1_u8StopChannel>
 8b0:	b6 01       	movw	r22, r12
 8b2:	8c 2f       	mov	r24, r28
 8b4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <TIMER1_u8SetComapre>
 8b8:	6b ef       	ldi	r22, 0xFB	; 251
 8ba:	73 e0       	ldi	r23, 0x03	; 3
 8bc:	8c 2f       	mov	r24, r28
 8be:	0e 94 89 04 	call	0x912	; 0x912 <TIMER1_u8SetChannelInterrupt>
 8c2:	0e 94 6f 04 	call	0x8de	; 0x8de <TIMER1_u8Start>
 8c6:	01 c0       	rjmp	.+2      	; 0x8ca <__stack+0x6b>
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	cf 91       	pop	r28
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	df 90       	pop	r13
 8d2:	cf 90       	pop	r12
 8d4:	08 95       	ret

000008d6 <TIMER1_u8Init>:
 8d6:	1f bc       	out	0x2f, r1	; 47
 8d8:	1e bc       	out	0x2e, r1	; 46
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	08 95       	ret

000008de <TIMER1_u8Start>:
 8de:	8e b5       	in	r24, 0x2e	; 46
 8e0:	83 60       	ori	r24, 0x03	; 3
 8e2:	8e bd       	out	0x2e, r24	; 46
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	9f ef       	ldi	r25, 0xFF	; 255
 8e8:	9d bd       	out	0x2d, r25	; 45
 8ea:	8c bd       	out	0x2c, r24	; 44
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	08 95       	ret

000008f0 <TIMER1_u8SetComapre>:
 8f0:	88 23       	and	r24, r24
 8f2:	19 f0       	breq	.+6      	; 0x8fa <TIMER1_u8SetComapre+0xa>
 8f4:	81 30       	cpi	r24, 0x01	; 1
 8f6:	31 f0       	breq	.+12     	; 0x904 <TIMER1_u8SetComapre+0x14>
 8f8:	0a c0       	rjmp	.+20     	; 0x90e <TIMER1_u8SetComapre+0x1e>
 8fa:	7a 95       	dec	r23
 8fc:	7b bd       	out	0x2b, r23	; 43
 8fe:	6a bd       	out	0x2a, r22	; 42
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	08 95       	ret
 904:	7a 95       	dec	r23
 906:	79 bd       	out	0x29, r23	; 41
 908:	68 bd       	out	0x28, r22	; 40
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	08 95       	ret
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	08 95       	ret

00000912 <TIMER1_u8SetChannelInterrupt>:
 912:	61 15       	cp	r22, r1
 914:	71 05       	cpc	r23, r1
 916:	e1 f0       	breq	.+56     	; 0x950 <TIMER1_u8SetChannelInterrupt+0x3e>
 918:	88 23       	and	r24, r24
 91a:	19 f0       	breq	.+6      	; 0x922 <TIMER1_u8SetChannelInterrupt+0x10>
 91c:	81 30       	cpi	r24, 0x01	; 1
 91e:	49 f0       	breq	.+18     	; 0x932 <TIMER1_u8SetChannelInterrupt+0x20>
 920:	19 c0       	rjmp	.+50     	; 0x954 <TIMER1_u8SetChannelInterrupt+0x42>
 922:	89 b7       	in	r24, 0x39	; 57
 924:	80 61       	ori	r24, 0x10	; 16
 926:	89 bf       	out	0x39, r24	; 57
 928:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <COMPA_callBack+0x1>
 92c:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <COMPA_callBack>
 930:	07 c0       	rjmp	.+14     	; 0x940 <TIMER1_u8SetChannelInterrupt+0x2e>
 932:	89 b7       	in	r24, 0x39	; 57
 934:	88 60       	ori	r24, 0x08	; 8
 936:	89 bf       	out	0x39, r24	; 57
 938:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <COMPB_callBack+0x1>
 93c:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <COMPB_callBack>
 940:	89 b7       	in	r24, 0x39	; 57
 942:	84 60       	ori	r24, 0x04	; 4
 944:	89 bf       	out	0x39, r24	; 57
 946:	8f b7       	in	r24, 0x3f	; 63
 948:	80 68       	ori	r24, 0x80	; 128
 94a:	8f bf       	out	0x3f, r24	; 63
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	08 95       	ret
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	08 95       	ret
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	08 95       	ret

00000958 <TIMER1_u8StopChannel>:
 958:	88 23       	and	r24, r24
 95a:	19 f0       	breq	.+6      	; 0x962 <TIMER1_u8StopChannel+0xa>
 95c:	81 30       	cpi	r24, 0x01	; 1
 95e:	51 f0       	breq	.+20     	; 0x974 <TIMER1_u8StopChannel+0x1c>
 960:	12 c0       	rjmp	.+36     	; 0x986 <TIMER1_u8StopChannel+0x2e>
 962:	89 b7       	in	r24, 0x39	; 57
 964:	8f 7e       	andi	r24, 0xEF	; 239
 966:	89 bf       	out	0x39, r24	; 57
 968:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <COMPA_callBack+0x1>
 96c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <COMPA_callBack>
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	08 95       	ret
 974:	89 b7       	in	r24, 0x39	; 57
 976:	87 7f       	andi	r24, 0xF7	; 247
 978:	89 bf       	out	0x39, r24	; 57
 97a:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <COMPB_callBack+0x1>
 97e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <COMPB_callBack>
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	08 95       	ret
 986:	80 e0       	ldi	r24, 0x00	; 0
 988:	08 95       	ret

0000098a <__vector_7>:
 98a:	1f 92       	push	r1
 98c:	0f 92       	push	r0
 98e:	0f b6       	in	r0, 0x3f	; 63
 990:	0f 92       	push	r0
 992:	11 24       	eor	r1, r1
 994:	2f 93       	push	r18
 996:	3f 93       	push	r19
 998:	4f 93       	push	r20
 99a:	5f 93       	push	r21
 99c:	6f 93       	push	r22
 99e:	7f 93       	push	r23
 9a0:	8f 93       	push	r24
 9a2:	9f 93       	push	r25
 9a4:	af 93       	push	r26
 9a6:	bf 93       	push	r27
 9a8:	ef 93       	push	r30
 9aa:	ff 93       	push	r31
 9ac:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <COMPA_callBack>
 9b0:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <COMPA_callBack+0x1>
 9b4:	30 97       	sbiw	r30, 0x00	; 0
 9b6:	09 f0       	breq	.+2      	; 0x9ba <__vector_7+0x30>
 9b8:	09 95       	icall
 9ba:	ff 91       	pop	r31
 9bc:	ef 91       	pop	r30
 9be:	bf 91       	pop	r27
 9c0:	af 91       	pop	r26
 9c2:	9f 91       	pop	r25
 9c4:	8f 91       	pop	r24
 9c6:	7f 91       	pop	r23
 9c8:	6f 91       	pop	r22
 9ca:	5f 91       	pop	r21
 9cc:	4f 91       	pop	r20
 9ce:	3f 91       	pop	r19
 9d0:	2f 91       	pop	r18
 9d2:	0f 90       	pop	r0
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	0f 90       	pop	r0
 9d8:	1f 90       	pop	r1
 9da:	18 95       	reti

000009dc <__vector_8>:
 9dc:	1f 92       	push	r1
 9de:	0f 92       	push	r0
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	0f 92       	push	r0
 9e4:	11 24       	eor	r1, r1
 9e6:	2f 93       	push	r18
 9e8:	3f 93       	push	r19
 9ea:	4f 93       	push	r20
 9ec:	5f 93       	push	r21
 9ee:	6f 93       	push	r22
 9f0:	7f 93       	push	r23
 9f2:	8f 93       	push	r24
 9f4:	9f 93       	push	r25
 9f6:	af 93       	push	r26
 9f8:	bf 93       	push	r27
 9fa:	ef 93       	push	r30
 9fc:	ff 93       	push	r31
 9fe:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <COMPB_callBack>
 a02:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <COMPB_callBack+0x1>
 a06:	30 97       	sbiw	r30, 0x00	; 0
 a08:	09 f0       	breq	.+2      	; 0xa0c <__vector_8+0x30>
 a0a:	09 95       	icall
 a0c:	ff 91       	pop	r31
 a0e:	ef 91       	pop	r30
 a10:	bf 91       	pop	r27
 a12:	af 91       	pop	r26
 a14:	9f 91       	pop	r25
 a16:	8f 91       	pop	r24
 a18:	7f 91       	pop	r23
 a1a:	6f 91       	pop	r22
 a1c:	5f 91       	pop	r21
 a1e:	4f 91       	pop	r20
 a20:	3f 91       	pop	r19
 a22:	2f 91       	pop	r18
 a24:	0f 90       	pop	r0
 a26:	0f be       	out	0x3f, r0	; 63
 a28:	0f 90       	pop	r0
 a2a:	1f 90       	pop	r1
 a2c:	18 95       	reti

00000a2e <__vector_9>:
 a2e:	1f 92       	push	r1
 a30:	0f 92       	push	r0
 a32:	0f b6       	in	r0, 0x3f	; 63
 a34:	0f 92       	push	r0
 a36:	11 24       	eor	r1, r1
 a38:	2f 93       	push	r18
 a3a:	3f 93       	push	r19
 a3c:	4f 93       	push	r20
 a3e:	5f 93       	push	r21
 a40:	6f 93       	push	r22
 a42:	7f 93       	push	r23
 a44:	8f 93       	push	r24
 a46:	9f 93       	push	r25
 a48:	af 93       	push	r26
 a4a:	bf 93       	push	r27
 a4c:	ef 93       	push	r30
 a4e:	ff 93       	push	r31
 a50:	80 e0       	ldi	r24, 0x00	; 0
 a52:	9f ef       	ldi	r25, 0xFF	; 255
 a54:	9d bd       	out	0x2d, r25	; 45
 a56:	8c bd       	out	0x2c, r24	; 44
 a58:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <COMPA_callBack>
 a5c:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <COMPA_callBack+0x1>
 a60:	30 97       	sbiw	r30, 0x00	; 0
 a62:	09 f0       	breq	.+2      	; 0xa66 <__vector_9+0x38>
 a64:	09 95       	icall
 a66:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <COMPB_callBack>
 a6a:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <COMPB_callBack+0x1>
 a6e:	30 97       	sbiw	r30, 0x00	; 0
 a70:	09 f0       	breq	.+2      	; 0xa74 <__vector_9+0x46>
 a72:	09 95       	icall
 a74:	ff 91       	pop	r31
 a76:	ef 91       	pop	r30
 a78:	bf 91       	pop	r27
 a7a:	af 91       	pop	r26
 a7c:	9f 91       	pop	r25
 a7e:	8f 91       	pop	r24
 a80:	7f 91       	pop	r23
 a82:	6f 91       	pop	r22
 a84:	5f 91       	pop	r21
 a86:	4f 91       	pop	r20
 a88:	3f 91       	pop	r19
 a8a:	2f 91       	pop	r18
 a8c:	0f 90       	pop	r0
 a8e:	0f be       	out	0x3f, r0	; 63
 a90:	0f 90       	pop	r0
 a92:	1f 90       	pop	r1
 a94:	18 95       	reti

00000a96 <DRIVE_u8Init>:

// function to initialize motors to drive 
uint8_t DRIVE_u8Init ( void )
{
	uint8_t Error_State = STD_TYPES_OK ;
 	Error_State = MOTOR_init( &Right_Motors );   // initialize right motors 
 a96:	85 e6       	ldi	r24, 0x65	; 101
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	0e 94 ef 00 	call	0x1de	; 0x1de <MOTOR_init>
	if ( Error_State == STD_TYPES_NOK )      // check if MOTOR_init return error state NOK
 a9e:	88 23       	and	r24, r24
 aa0:	21 f0       	breq	.+8      	; 0xaaa <DRIVE_u8Init+0x14>
	{
		return Error_State ;
	}
	Error_State = MOTOR_init( &Left_Motors );	// initialize left motors
 aa2:	80 e6       	ldi	r24, 0x60	; 96
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 ef 00 	call	0x1de	; 0x1de <MOTOR_init>
	if ( Error_State == STD_TYPES_NOK )		 // check if MOTOR_init return error state NOK
	{
		return Error_State ;
	}	
	return Error_State ;
}
 aaa:	08 95       	ret

00000aac <DRIVE_u8Right>:

uint8_t DRIVE_u8Right ( void )
{
	uint8_t Error_State = STD_TYPES_OK ;
	// move right motors backward 
	Error_State = MOTOR_Move( &Right_Motors , SLOW , ANTI_CLOCKWISE ) ;
 aac:	41 e0       	ldi	r20, 0x01	; 1
 aae:	6e e1       	ldi	r22, 0x1E	; 30
 ab0:	85 e6       	ldi	r24, 0x65	; 101
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	0e 94 26 01 	call	0x24c	; 0x24c <MOTOR_Move>
	if ( Error_State == STD_TYPES_NOK ) // check if MOTOR_Move return error state NOK
 ab8:	88 23       	and	r24, r24
 aba:	31 f0       	breq	.+12     	; 0xac8 <DRIVE_u8Right+0x1c>
	{
		return Error_State ;
	}
	// move left motors forward 
	Error_State = MOTOR_Move( &Left_Motors , SLOW , CLOCKWISE ) ;
 abc:	40 e0       	ldi	r20, 0x00	; 0
 abe:	6e e1       	ldi	r22, 0x1E	; 30
 ac0:	80 e6       	ldi	r24, 0x60	; 96
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	0e 94 26 01 	call	0x24c	; 0x24c <MOTOR_Move>
	if ( Error_State == STD_TYPES_NOK )	// check if MOTOR_Move return error state NOK
	{
		return Error_State ;
	}
	return Error_State ;
}
 ac8:	08 95       	ret

00000aca <DRIVE_u8Left>:

uint8_t DRIVE_u8Left ( void )
{
	uint8_t Error_State = STD_TYPES_OK ;
	// move left motors backward 
	Error_State = MOTOR_Move( &Left_Motors , SLOW , ANTI_CLOCKWISE ) ;
 aca:	41 e0       	ldi	r20, 0x01	; 1
 acc:	6e e1       	ldi	r22, 0x1E	; 30
 ace:	80 e6       	ldi	r24, 0x60	; 96
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	0e 94 26 01 	call	0x24c	; 0x24c <MOTOR_Move>
	if ( Error_State == STD_TYPES_NOK )	// check if MOTOR_Move return error state NOK
 ad6:	88 23       	and	r24, r24
 ad8:	31 f0       	breq	.+12     	; 0xae6 <DRIVE_u8Left+0x1c>
	{
		return Error_State ;
	}
	// move right motors forward 
	Error_State = MOTOR_Move( &Right_Motors , SLOW , CLOCKWISE ) ;
 ada:	40 e0       	ldi	r20, 0x00	; 0
 adc:	6e e1       	ldi	r22, 0x1E	; 30
 ade:	85 e6       	ldi	r24, 0x65	; 101
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	0e 94 26 01 	call	0x24c	; 0x24c <MOTOR_Move>
	if ( Error_State == STD_TYPES_NOK )	// check if MOTOR_Move return error state NOK
	{
		return Error_State ;
	}
	return Error_State ;
}
 ae6:	08 95       	ret

00000ae8 <DRIVE_u8Mode>:

uint8_t DRIVE_u8Mode ( uint8_t mode )
{
	uint8_t Error_State = STD_TYPES_OK ;
	switch ( mode )
 ae8:	82 30       	cpi	r24, 0x02	; 2
 aea:	61 f1       	breq	.+88     	; 0xb44 <DRIVE_u8Mode+0x5c>
 aec:	28 f4       	brcc	.+10     	; 0xaf8 <DRIVE_u8Mode+0x10>
 aee:	88 23       	and	r24, r24
 af0:	49 f0       	breq	.+18     	; 0xb04 <DRIVE_u8Mode+0x1c>
 af2:	81 30       	cpi	r24, 0x01	; 1
 af4:	b1 f0       	breq	.+44     	; 0xb22 <DRIVE_u8Mode+0x3a>
 af6:	58 c0       	rjmp	.+176    	; 0xba8 <DRIVE_u8Mode+0xc0>
 af8:	83 30       	cpi	r24, 0x03	; 3
 afa:	a9 f1       	breq	.+106    	; 0xb66 <DRIVE_u8Mode+0x7e>
 afc:	84 30       	cpi	r24, 0x04	; 4
 afe:	09 f4       	brne	.+2      	; 0xb02 <DRIVE_u8Mode+0x1a>
 b00:	43 c0       	rjmp	.+134    	; 0xb88 <DRIVE_u8Mode+0xa0>
 b02:	52 c0       	rjmp	.+164    	; 0xba8 <DRIVE_u8Mode+0xc0>
	{
		case MODE1 :
			// stop left motors 
			Error_State = MOTOR_Stop( &Left_Motors ) ;
 b04:	80 e6       	ldi	r24, 0x60	; 96
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	0e 94 63 01 	call	0x2c6	; 0x2c6 <MOTOR_Stop>
			if ( Error_State == STD_TYPES_NOK )	// check if MOTOR_Stop return error state NOK
 b0c:	88 23       	and	r24, r24
 b0e:	09 f4       	brne	.+2      	; 0xb12 <DRIVE_u8Mode+0x2a>
 b10:	4b c0       	rjmp	.+150    	; 0xba8 <DRIVE_u8Mode+0xc0>
			{
				return Error_State ;
			}
			// stop right motors 		
			Error_State = MOTOR_Stop( &Right_Motors ) ;
 b12:	85 e6       	ldi	r24, 0x65	; 101
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	0e 94 63 01 	call	0x2c6	; 0x2c6 <MOTOR_Stop>
			if ( Error_State == STD_TYPES_NOK )	// check if MOTOR_Stop return error state NOK
 b1a:	88 23       	and	r24, r24
 b1c:	09 f4       	brne	.+2      	; 0xb20 <DRIVE_u8Mode+0x38>
 b1e:	44 c0       	rjmp	.+136    	; 0xba8 <DRIVE_u8Mode+0xc0>
 b20:	43 c0       	rjmp	.+134    	; 0xba8 <DRIVE_u8Mode+0xc0>
			}
			break ;	
			
		case MODE2 :
			// move left motors with the first speed 
			Error_State = MOTOR_Move( &Left_Motors , SLOW , CLOCKWISE ) ;
 b22:	40 e0       	ldi	r20, 0x00	; 0
 b24:	6e e1       	ldi	r22, 0x1E	; 30
 b26:	80 e6       	ldi	r24, 0x60	; 96
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	0e 94 26 01 	call	0x24c	; 0x24c <MOTOR_Move>
			if ( Error_State == STD_TYPES_NOK )	// check if MOTOR_Move return error state NOK
 b2e:	88 23       	and	r24, r24
 b30:	d9 f1       	breq	.+118    	; 0xba8 <DRIVE_u8Mode+0xc0>
			{
				return Error_State ;
			}
			// move right motors with the first speed 		
			Error_State = MOTOR_Move( &Right_Motors , SLOW , CLOCKWISE ) ;
 b32:	40 e0       	ldi	r20, 0x00	; 0
 b34:	6e e1       	ldi	r22, 0x1E	; 30
 b36:	85 e6       	ldi	r24, 0x65	; 101
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	0e 94 26 01 	call	0x24c	; 0x24c <MOTOR_Move>
			if ( Error_State == STD_TYPES_NOK )	// check if MOTOR_Move return error state NOK
 b3e:	88 23       	and	r24, r24
 b40:	99 f1       	breq	.+102    	; 0xba8 <DRIVE_u8Mode+0xc0>
 b42:	32 c0       	rjmp	.+100    	; 0xba8 <DRIVE_u8Mode+0xc0>
			}
			break ;	
			
		case MODE3 :
			// move left motors with the second speed 
			Error_State = MOTOR_Move( &Left_Motors , MIDIUM , CLOCKWISE ) ;
 b44:	40 e0       	ldi	r20, 0x00	; 0
 b46:	6c e3       	ldi	r22, 0x3C	; 60
 b48:	80 e6       	ldi	r24, 0x60	; 96
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	0e 94 26 01 	call	0x24c	; 0x24c <MOTOR_Move>
			if ( Error_State == STD_TYPES_NOK )	// check if MOTOR_Move return error state NOK
 b50:	88 23       	and	r24, r24
 b52:	51 f1       	breq	.+84     	; 0xba8 <DRIVE_u8Mode+0xc0>
			{
				return Error_State ;
			}	
			// move right motors with the second speed 	
			Error_State = MOTOR_Move( &Right_Motors , MIDIUM , CLOCKWISE ) ;
 b54:	40 e0       	ldi	r20, 0x00	; 0
 b56:	6c e3       	ldi	r22, 0x3C	; 60
 b58:	85 e6       	ldi	r24, 0x65	; 101
 b5a:	90 e0       	ldi	r25, 0x00	; 0
 b5c:	0e 94 26 01 	call	0x24c	; 0x24c <MOTOR_Move>
			if ( Error_State == STD_TYPES_NOK )	// check if MOTOR_Move return error state NOK
 b60:	88 23       	and	r24, r24
 b62:	11 f1       	breq	.+68     	; 0xba8 <DRIVE_u8Mode+0xc0>
 b64:	21 c0       	rjmp	.+66     	; 0xba8 <DRIVE_u8Mode+0xc0>
			}
			break ;	
		
		case MODE4 :
			// move left motors with the third speed 
			Error_State = MOTOR_Move( &Left_Motors , FAST , CLOCKWISE ) ;
 b66:	40 e0       	ldi	r20, 0x00	; 0
 b68:	6a e5       	ldi	r22, 0x5A	; 90
 b6a:	80 e6       	ldi	r24, 0x60	; 96
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	0e 94 26 01 	call	0x24c	; 0x24c <MOTOR_Move>
			if ( Error_State == STD_TYPES_NOK )	// check if MOTOR_Move return error state NOK
 b72:	88 23       	and	r24, r24
 b74:	c9 f0       	breq	.+50     	; 0xba8 <DRIVE_u8Mode+0xc0>
			{
				return Error_State ;
			}	
			// move right motors with the third speed 	
			Error_State = MOTOR_Move( &Right_Motors , FAST , CLOCKWISE ) ;
 b76:	40 e0       	ldi	r20, 0x00	; 0
 b78:	6a e5       	ldi	r22, 0x5A	; 90
 b7a:	85 e6       	ldi	r24, 0x65	; 101
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	0e 94 26 01 	call	0x24c	; 0x24c <MOTOR_Move>
			if ( Error_State == STD_TYPES_NOK )	// check if MOTOR_Move return error state NOK
 b82:	88 23       	and	r24, r24
 b84:	89 f0       	breq	.+34     	; 0xba8 <DRIVE_u8Mode+0xc0>
 b86:	10 c0       	rjmp	.+32     	; 0xba8 <DRIVE_u8Mode+0xc0>
			}
			break ;
				
		case MODE5 :
			// move left motors backward 
			Error_State = MOTOR_Move( &Left_Motors , SLOW , ANTI_CLOCKWISE ) ;
 b88:	41 e0       	ldi	r20, 0x01	; 1
 b8a:	6e e1       	ldi	r22, 0x1E	; 30
 b8c:	80 e6       	ldi	r24, 0x60	; 96
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	0e 94 26 01 	call	0x24c	; 0x24c <MOTOR_Move>
			if ( Error_State == STD_TYPES_NOK )	// check if MOTOR_Move return error state NOK
 b94:	88 23       	and	r24, r24
 b96:	41 f0       	breq	.+16     	; 0xba8 <DRIVE_u8Mode+0xc0>
			{
				return Error_State ;
			}	
			// move right motors backward 	
			Error_State = MOTOR_Move( &Right_Motors , SLOW , ANTI_CLOCKWISE ) ;
 b98:	41 e0       	ldi	r20, 0x01	; 1
 b9a:	6e e1       	ldi	r22, 0x1E	; 30
 b9c:	85 e6       	ldi	r24, 0x65	; 101
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	0e 94 26 01 	call	0x24c	; 0x24c <MOTOR_Move>
			if ( Error_State == STD_TYPES_NOK )	// check if MOTOR_Move return error state NOK
 ba4:	88 23       	and	r24, r24
 ba6:	01 f0       	breq	.+0      	; 0xba8 <DRIVE_u8Mode+0xc0>
			break ;
				
		default :
			break ;
	}
}
 ba8:	08 95       	ret

00000baa <UI_Init>:
// function to initialize Keypad and LEDs 
uint8_t UI_Init()
{
	uint8_t u8ErrorState = STD_TYPES_OK;

	LED_u8Init(Mode_A);
 baa:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Mode_A>
 bae:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <Mode_A+0x1>
 bb2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LED_u8Init>
	LED_u8Init(Mode_B);
 bb6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Mode_B>
 bba:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <Mode_B+0x1>
 bbe:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LED_u8Init>
	LED_u8Init(Mode_C);
 bc2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Mode_C>
 bc6:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <Mode_C+0x1>
 bca:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LED_u8Init>
	LED_u8Init(Mode_D);
 bce:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Mode_D>
 bd2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Mode_D+0x1>
 bd6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LED_u8Init>


	KEYPAD_u8Init();
 bda:	0e 94 49 00 	call	0x92	; 0x92 <KEYPAD_u8Init>
	return u8ErrorState;
}
 bde:	81 e0       	ldi	r24, 0x01	; 1
 be0:	08 95       	ret

00000be2 <UI_GetKeyPressed>:

// function to get presed key 
uint8_t UI_GetKeyPressed(uint8_t* UI_keyModuleReturn)
{
	uint8_t u8ErrorState= STD_TYPES_OK;
	u8ErrorState= KEYPAD_u8GetPressedKey(UI_keyModuleReturn);
 be2:	0e 94 77 00 	call	0xee	; 0xee <KEYPAD_u8GetPressedKey>
	return u8ErrorState;
}
 be6:	08 95       	ret

00000be8 <UI_SetLedModuleState>:

// function to synchronization LEDs with move modes 
uint8_t UI_SetLedModuleState(uint8_t UI_LEDModuleState)
{
 be8:	cf 93       	push	r28
 bea:	c8 2f       	mov	r28, r24
	uint8_t u8ErrorState= STD_TYPES_OK;
	LED_u8Off(Mode_A);
 bec:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Mode_A>
 bf0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <Mode_A+0x1>
 bf4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LED_u8Off>
	LED_u8Off(Mode_B);
 bf8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Mode_B>
 bfc:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <Mode_B+0x1>
 c00:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LED_u8Off>
	LED_u8Off(Mode_C);
 c04:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Mode_C>
 c08:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <Mode_C+0x1>
 c0c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LED_u8Off>
	LED_u8Off(Mode_D);
 c10:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Mode_D>
 c14:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Mode_D+0x1>
 c18:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LED_u8Off>

	switch (UI_LEDModuleState)
 c1c:	c2 30       	cpi	r28, 0x02	; 2
 c1e:	99 f0       	breq	.+38     	; 0xc46 <UI_SetLedModuleState+0x5e>
 c20:	28 f4       	brcc	.+10     	; 0xc2c <UI_SetLedModuleState+0x44>
 c22:	cc 23       	and	r28, r28
 c24:	41 f1       	breq	.+80     	; 0xc76 <UI_SetLedModuleState+0x8e>
 c26:	c1 30       	cpi	r28, 0x01	; 1
 c28:	31 f0       	breq	.+12     	; 0xc36 <UI_SetLedModuleState+0x4e>
 c2a:	3f c0       	rjmp	.+126    	; 0xcaa <UI_SetLedModuleState+0xc2>
 c2c:	c3 30       	cpi	r28, 0x03	; 3
 c2e:	99 f0       	breq	.+38     	; 0xc56 <UI_SetLedModuleState+0x6e>
 c30:	c4 30       	cpi	r28, 0x04	; 4
 c32:	c9 f0       	breq	.+50     	; 0xc66 <UI_SetLedModuleState+0x7e>
 c34:	3a c0       	rjmp	.+116    	; 0xcaa <UI_SetLedModuleState+0xc2>
	{
	case MODE1_ON:					// the first speed 
		LED_u8On(Mode_A);
 c36:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Mode_A>
 c3a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <Mode_A+0x1>
 c3e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED_u8On>
}

// function to synchronization LEDs with move modes 
uint8_t UI_SetLedModuleState(uint8_t UI_LEDModuleState)
{
	uint8_t u8ErrorState= STD_TYPES_OK;
 c42:	81 e0       	ldi	r24, 0x01	; 1

	switch (UI_LEDModuleState)
	{
	case MODE1_ON:					// the first speed 
		LED_u8On(Mode_A);
		break;
 c44:	33 c0       	rjmp	.+102    	; 0xcac <UI_SetLedModuleState+0xc4>
	case MODE2_ON:					// the second speed 
		LED_u8On(Mode_B);
 c46:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Mode_B>
 c4a:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <Mode_B+0x1>
 c4e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED_u8On>
}

// function to synchronization LEDs with move modes 
uint8_t UI_SetLedModuleState(uint8_t UI_LEDModuleState)
{
	uint8_t u8ErrorState= STD_TYPES_OK;
 c52:	81 e0       	ldi	r24, 0x01	; 1
	case MODE1_ON:					// the first speed 
		LED_u8On(Mode_A);
		break;
	case MODE2_ON:					// the second speed 
		LED_u8On(Mode_B);
		break;
 c54:	2b c0       	rjmp	.+86     	; 0xcac <UI_SetLedModuleState+0xc4>
	case MODE3_ON:					// the third speed 
		LED_u8On(Mode_C);
 c56:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Mode_C>
 c5a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <Mode_C+0x1>
 c5e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED_u8On>
}

// function to synchronization LEDs with move modes 
uint8_t UI_SetLedModuleState(uint8_t UI_LEDModuleState)
{
	uint8_t u8ErrorState= STD_TYPES_OK;
 c62:	81 e0       	ldi	r24, 0x01	; 1
	case MODE2_ON:					// the second speed 
		LED_u8On(Mode_B);
		break;
	case MODE3_ON:					// the third speed 
		LED_u8On(Mode_C);
		break;
 c64:	23 c0       	rjmp	.+70     	; 0xcac <UI_SetLedModuleState+0xc4>
	case MODE4_ON:					// backward mode 
		LED_u8On(Mode_D);
 c66:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Mode_D>
 c6a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Mode_D+0x1>
 c6e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED_u8On>
}

// function to synchronization LEDs with move modes 
uint8_t UI_SetLedModuleState(uint8_t UI_LEDModuleState)
{
	uint8_t u8ErrorState= STD_TYPES_OK;
 c72:	81 e0       	ldi	r24, 0x01	; 1
	case MODE3_ON:					// the third speed 
		LED_u8On(Mode_C);
		break;
	case MODE4_ON:					// backward mode 
		LED_u8On(Mode_D);
		break;
 c74:	1b c0       	rjmp	.+54     	; 0xcac <UI_SetLedModuleState+0xc4>
	case ALL_ON:					// stop mode 
		LED_u8On(Mode_A);
 c76:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Mode_A>
 c7a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <Mode_A+0x1>
 c7e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED_u8On>
		LED_u8On(Mode_B);
 c82:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Mode_B>
 c86:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <Mode_B+0x1>
 c8a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED_u8On>
		LED_u8On(Mode_C);
 c8e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Mode_C>
 c92:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <Mode_C+0x1>
 c96:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED_u8On>
		LED_u8On(Mode_D);
 c9a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Mode_D>
 c9e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Mode_D+0x1>
 ca2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED_u8On>
}

// function to synchronization LEDs with move modes 
uint8_t UI_SetLedModuleState(uint8_t UI_LEDModuleState)
{
	uint8_t u8ErrorState= STD_TYPES_OK;
 ca6:	81 e0       	ldi	r24, 0x01	; 1
	case ALL_ON:					// stop mode 
		LED_u8On(Mode_A);
		LED_u8On(Mode_B);
		LED_u8On(Mode_C);
		LED_u8On(Mode_D);
		break;
 ca8:	01 c0       	rjmp	.+2      	; 0xcac <UI_SetLedModuleState+0xc4>
	default:
		u8ErrorState  = STD_TYPES_NOK;
 caa:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}

	return u8ErrorState;
}
 cac:	cf 91       	pop	r28
 cae:	08 95       	ret

00000cb0 <__divsf3>:
 cb0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__divsf3x>
 cb4:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__fp_round>
 cb8:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fp_pscB>
 cbc:	58 f0       	brcs	.+22     	; 0xcd4 <__divsf3+0x24>
 cbe:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fp_pscA>
 cc2:	40 f0       	brcs	.+16     	; 0xcd4 <__divsf3+0x24>
 cc4:	29 f4       	brne	.+10     	; 0xcd0 <__divsf3+0x20>
 cc6:	5f 3f       	cpi	r21, 0xFF	; 255
 cc8:	29 f0       	breq	.+10     	; 0xcd4 <__divsf3+0x24>
 cca:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__fp_inf>
 cce:	51 11       	cpse	r21, r1
 cd0:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_szero>
 cd4:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__fp_nan>

00000cd8 <__divsf3x>:
 cd8:	0e 94 5e 07 	call	0xebc	; 0xebc <__fp_split3>
 cdc:	68 f3       	brcs	.-38     	; 0xcb8 <__divsf3+0x8>

00000cde <__divsf3_pse>:
 cde:	99 23       	and	r25, r25
 ce0:	b1 f3       	breq	.-20     	; 0xcce <__divsf3+0x1e>
 ce2:	55 23       	and	r21, r21
 ce4:	91 f3       	breq	.-28     	; 0xcca <__divsf3+0x1a>
 ce6:	95 1b       	sub	r25, r21
 ce8:	55 0b       	sbc	r21, r21
 cea:	bb 27       	eor	r27, r27
 cec:	aa 27       	eor	r26, r26
 cee:	62 17       	cp	r22, r18
 cf0:	73 07       	cpc	r23, r19
 cf2:	84 07       	cpc	r24, r20
 cf4:	38 f0       	brcs	.+14     	; 0xd04 <__divsf3_pse+0x26>
 cf6:	9f 5f       	subi	r25, 0xFF	; 255
 cf8:	5f 4f       	sbci	r21, 0xFF	; 255
 cfa:	22 0f       	add	r18, r18
 cfc:	33 1f       	adc	r19, r19
 cfe:	44 1f       	adc	r20, r20
 d00:	aa 1f       	adc	r26, r26
 d02:	a9 f3       	breq	.-22     	; 0xcee <__divsf3_pse+0x10>
 d04:	35 d0       	rcall	.+106    	; 0xd70 <__divsf3_pse+0x92>
 d06:	0e 2e       	mov	r0, r30
 d08:	3a f0       	brmi	.+14     	; 0xd18 <__divsf3_pse+0x3a>
 d0a:	e0 e8       	ldi	r30, 0x80	; 128
 d0c:	32 d0       	rcall	.+100    	; 0xd72 <__divsf3_pse+0x94>
 d0e:	91 50       	subi	r25, 0x01	; 1
 d10:	50 40       	sbci	r21, 0x00	; 0
 d12:	e6 95       	lsr	r30
 d14:	00 1c       	adc	r0, r0
 d16:	ca f7       	brpl	.-14     	; 0xd0a <__divsf3_pse+0x2c>
 d18:	2b d0       	rcall	.+86     	; 0xd70 <__divsf3_pse+0x92>
 d1a:	fe 2f       	mov	r31, r30
 d1c:	29 d0       	rcall	.+82     	; 0xd70 <__divsf3_pse+0x92>
 d1e:	66 0f       	add	r22, r22
 d20:	77 1f       	adc	r23, r23
 d22:	88 1f       	adc	r24, r24
 d24:	bb 1f       	adc	r27, r27
 d26:	26 17       	cp	r18, r22
 d28:	37 07       	cpc	r19, r23
 d2a:	48 07       	cpc	r20, r24
 d2c:	ab 07       	cpc	r26, r27
 d2e:	b0 e8       	ldi	r27, 0x80	; 128
 d30:	09 f0       	breq	.+2      	; 0xd34 <__divsf3_pse+0x56>
 d32:	bb 0b       	sbc	r27, r27
 d34:	80 2d       	mov	r24, r0
 d36:	bf 01       	movw	r22, r30
 d38:	ff 27       	eor	r31, r31
 d3a:	93 58       	subi	r25, 0x83	; 131
 d3c:	5f 4f       	sbci	r21, 0xFF	; 255
 d3e:	3a f0       	brmi	.+14     	; 0xd4e <__divsf3_pse+0x70>
 d40:	9e 3f       	cpi	r25, 0xFE	; 254
 d42:	51 05       	cpc	r21, r1
 d44:	78 f0       	brcs	.+30     	; 0xd64 <__divsf3_pse+0x86>
 d46:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__fp_inf>
 d4a:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_szero>
 d4e:	5f 3f       	cpi	r21, 0xFF	; 255
 d50:	e4 f3       	brlt	.-8      	; 0xd4a <__divsf3_pse+0x6c>
 d52:	98 3e       	cpi	r25, 0xE8	; 232
 d54:	d4 f3       	brlt	.-12     	; 0xd4a <__divsf3_pse+0x6c>
 d56:	86 95       	lsr	r24
 d58:	77 95       	ror	r23
 d5a:	67 95       	ror	r22
 d5c:	b7 95       	ror	r27
 d5e:	f7 95       	ror	r31
 d60:	9f 5f       	subi	r25, 0xFF	; 255
 d62:	c9 f7       	brne	.-14     	; 0xd56 <__divsf3_pse+0x78>
 d64:	88 0f       	add	r24, r24
 d66:	91 1d       	adc	r25, r1
 d68:	96 95       	lsr	r25
 d6a:	87 95       	ror	r24
 d6c:	97 f9       	bld	r25, 7
 d6e:	08 95       	ret
 d70:	e1 e0       	ldi	r30, 0x01	; 1
 d72:	66 0f       	add	r22, r22
 d74:	77 1f       	adc	r23, r23
 d76:	88 1f       	adc	r24, r24
 d78:	bb 1f       	adc	r27, r27
 d7a:	62 17       	cp	r22, r18
 d7c:	73 07       	cpc	r23, r19
 d7e:	84 07       	cpc	r24, r20
 d80:	ba 07       	cpc	r27, r26
 d82:	20 f0       	brcs	.+8      	; 0xd8c <__divsf3_pse+0xae>
 d84:	62 1b       	sub	r22, r18
 d86:	73 0b       	sbc	r23, r19
 d88:	84 0b       	sbc	r24, r20
 d8a:	ba 0b       	sbc	r27, r26
 d8c:	ee 1f       	adc	r30, r30
 d8e:	88 f7       	brcc	.-30     	; 0xd72 <__divsf3_pse+0x94>
 d90:	e0 95       	com	r30
 d92:	08 95       	ret

00000d94 <__fixunssfsi>:
 d94:	0e 94 66 07 	call	0xecc	; 0xecc <__fp_splitA>
 d98:	88 f0       	brcs	.+34     	; 0xdbc <__fixunssfsi+0x28>
 d9a:	9f 57       	subi	r25, 0x7F	; 127
 d9c:	98 f0       	brcs	.+38     	; 0xdc4 <__fixunssfsi+0x30>
 d9e:	b9 2f       	mov	r27, r25
 da0:	99 27       	eor	r25, r25
 da2:	b7 51       	subi	r27, 0x17	; 23
 da4:	b0 f0       	brcs	.+44     	; 0xdd2 <__fixunssfsi+0x3e>
 da6:	e1 f0       	breq	.+56     	; 0xde0 <__fixunssfsi+0x4c>
 da8:	66 0f       	add	r22, r22
 daa:	77 1f       	adc	r23, r23
 dac:	88 1f       	adc	r24, r24
 dae:	99 1f       	adc	r25, r25
 db0:	1a f0       	brmi	.+6      	; 0xdb8 <__fixunssfsi+0x24>
 db2:	ba 95       	dec	r27
 db4:	c9 f7       	brne	.-14     	; 0xda8 <__fixunssfsi+0x14>
 db6:	14 c0       	rjmp	.+40     	; 0xde0 <__fixunssfsi+0x4c>
 db8:	b1 30       	cpi	r27, 0x01	; 1
 dba:	91 f0       	breq	.+36     	; 0xde0 <__fixunssfsi+0x4c>
 dbc:	0e 94 80 07 	call	0xf00	; 0xf00 <__fp_zero>
 dc0:	b1 e0       	ldi	r27, 0x01	; 1
 dc2:	08 95       	ret
 dc4:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_zero>
 dc8:	67 2f       	mov	r22, r23
 dca:	78 2f       	mov	r23, r24
 dcc:	88 27       	eor	r24, r24
 dce:	b8 5f       	subi	r27, 0xF8	; 248
 dd0:	39 f0       	breq	.+14     	; 0xde0 <__fixunssfsi+0x4c>
 dd2:	b9 3f       	cpi	r27, 0xF9	; 249
 dd4:	cc f3       	brlt	.-14     	; 0xdc8 <__fixunssfsi+0x34>
 dd6:	86 95       	lsr	r24
 dd8:	77 95       	ror	r23
 dda:	67 95       	ror	r22
 ddc:	b3 95       	inc	r27
 dde:	d9 f7       	brne	.-10     	; 0xdd6 <__fixunssfsi+0x42>
 de0:	3e f4       	brtc	.+14     	; 0xdf0 <__fixunssfsi+0x5c>
 de2:	90 95       	com	r25
 de4:	80 95       	com	r24
 de6:	70 95       	com	r23
 de8:	61 95       	neg	r22
 dea:	7f 4f       	sbci	r23, 0xFF	; 255
 dec:	8f 4f       	sbci	r24, 0xFF	; 255
 dee:	9f 4f       	sbci	r25, 0xFF	; 255
 df0:	08 95       	ret

00000df2 <__floatunsisf>:
 df2:	e8 94       	clt
 df4:	09 c0       	rjmp	.+18     	; 0xe08 <__floatsisf+0x12>

00000df6 <__floatsisf>:
 df6:	97 fb       	bst	r25, 7
 df8:	3e f4       	brtc	.+14     	; 0xe08 <__floatsisf+0x12>
 dfa:	90 95       	com	r25
 dfc:	80 95       	com	r24
 dfe:	70 95       	com	r23
 e00:	61 95       	neg	r22
 e02:	7f 4f       	sbci	r23, 0xFF	; 255
 e04:	8f 4f       	sbci	r24, 0xFF	; 255
 e06:	9f 4f       	sbci	r25, 0xFF	; 255
 e08:	99 23       	and	r25, r25
 e0a:	a9 f0       	breq	.+42     	; 0xe36 <__floatsisf+0x40>
 e0c:	f9 2f       	mov	r31, r25
 e0e:	96 e9       	ldi	r25, 0x96	; 150
 e10:	bb 27       	eor	r27, r27
 e12:	93 95       	inc	r25
 e14:	f6 95       	lsr	r31
 e16:	87 95       	ror	r24
 e18:	77 95       	ror	r23
 e1a:	67 95       	ror	r22
 e1c:	b7 95       	ror	r27
 e1e:	f1 11       	cpse	r31, r1
 e20:	f8 cf       	rjmp	.-16     	; 0xe12 <__floatsisf+0x1c>
 e22:	fa f4       	brpl	.+62     	; 0xe62 <__floatsisf+0x6c>
 e24:	bb 0f       	add	r27, r27
 e26:	11 f4       	brne	.+4      	; 0xe2c <__floatsisf+0x36>
 e28:	60 ff       	sbrs	r22, 0
 e2a:	1b c0       	rjmp	.+54     	; 0xe62 <__floatsisf+0x6c>
 e2c:	6f 5f       	subi	r22, 0xFF	; 255
 e2e:	7f 4f       	sbci	r23, 0xFF	; 255
 e30:	8f 4f       	sbci	r24, 0xFF	; 255
 e32:	9f 4f       	sbci	r25, 0xFF	; 255
 e34:	16 c0       	rjmp	.+44     	; 0xe62 <__floatsisf+0x6c>
 e36:	88 23       	and	r24, r24
 e38:	11 f0       	breq	.+4      	; 0xe3e <__floatsisf+0x48>
 e3a:	96 e9       	ldi	r25, 0x96	; 150
 e3c:	11 c0       	rjmp	.+34     	; 0xe60 <__floatsisf+0x6a>
 e3e:	77 23       	and	r23, r23
 e40:	21 f0       	breq	.+8      	; 0xe4a <__floatsisf+0x54>
 e42:	9e e8       	ldi	r25, 0x8E	; 142
 e44:	87 2f       	mov	r24, r23
 e46:	76 2f       	mov	r23, r22
 e48:	05 c0       	rjmp	.+10     	; 0xe54 <__floatsisf+0x5e>
 e4a:	66 23       	and	r22, r22
 e4c:	71 f0       	breq	.+28     	; 0xe6a <__floatsisf+0x74>
 e4e:	96 e8       	ldi	r25, 0x86	; 134
 e50:	86 2f       	mov	r24, r22
 e52:	70 e0       	ldi	r23, 0x00	; 0
 e54:	60 e0       	ldi	r22, 0x00	; 0
 e56:	2a f0       	brmi	.+10     	; 0xe62 <__floatsisf+0x6c>
 e58:	9a 95       	dec	r25
 e5a:	66 0f       	add	r22, r22
 e5c:	77 1f       	adc	r23, r23
 e5e:	88 1f       	adc	r24, r24
 e60:	da f7       	brpl	.-10     	; 0xe58 <__floatsisf+0x62>
 e62:	88 0f       	add	r24, r24
 e64:	96 95       	lsr	r25
 e66:	87 95       	ror	r24
 e68:	97 f9       	bld	r25, 7
 e6a:	08 95       	ret

00000e6c <__fp_inf>:
 e6c:	97 f9       	bld	r25, 7
 e6e:	9f 67       	ori	r25, 0x7F	; 127
 e70:	80 e8       	ldi	r24, 0x80	; 128
 e72:	70 e0       	ldi	r23, 0x00	; 0
 e74:	60 e0       	ldi	r22, 0x00	; 0
 e76:	08 95       	ret

00000e78 <__fp_nan>:
 e78:	9f ef       	ldi	r25, 0xFF	; 255
 e7a:	80 ec       	ldi	r24, 0xC0	; 192
 e7c:	08 95       	ret

00000e7e <__fp_pscA>:
 e7e:	00 24       	eor	r0, r0
 e80:	0a 94       	dec	r0
 e82:	16 16       	cp	r1, r22
 e84:	17 06       	cpc	r1, r23
 e86:	18 06       	cpc	r1, r24
 e88:	09 06       	cpc	r0, r25
 e8a:	08 95       	ret

00000e8c <__fp_pscB>:
 e8c:	00 24       	eor	r0, r0
 e8e:	0a 94       	dec	r0
 e90:	12 16       	cp	r1, r18
 e92:	13 06       	cpc	r1, r19
 e94:	14 06       	cpc	r1, r20
 e96:	05 06       	cpc	r0, r21
 e98:	08 95       	ret

00000e9a <__fp_round>:
 e9a:	09 2e       	mov	r0, r25
 e9c:	03 94       	inc	r0
 e9e:	00 0c       	add	r0, r0
 ea0:	11 f4       	brne	.+4      	; 0xea6 <__fp_round+0xc>
 ea2:	88 23       	and	r24, r24
 ea4:	52 f0       	brmi	.+20     	; 0xeba <__fp_round+0x20>
 ea6:	bb 0f       	add	r27, r27
 ea8:	40 f4       	brcc	.+16     	; 0xeba <__fp_round+0x20>
 eaa:	bf 2b       	or	r27, r31
 eac:	11 f4       	brne	.+4      	; 0xeb2 <__fp_round+0x18>
 eae:	60 ff       	sbrs	r22, 0
 eb0:	04 c0       	rjmp	.+8      	; 0xeba <__fp_round+0x20>
 eb2:	6f 5f       	subi	r22, 0xFF	; 255
 eb4:	7f 4f       	sbci	r23, 0xFF	; 255
 eb6:	8f 4f       	sbci	r24, 0xFF	; 255
 eb8:	9f 4f       	sbci	r25, 0xFF	; 255
 eba:	08 95       	ret

00000ebc <__fp_split3>:
 ebc:	57 fd       	sbrc	r21, 7
 ebe:	90 58       	subi	r25, 0x80	; 128
 ec0:	44 0f       	add	r20, r20
 ec2:	55 1f       	adc	r21, r21
 ec4:	59 f0       	breq	.+22     	; 0xedc <__fp_splitA+0x10>
 ec6:	5f 3f       	cpi	r21, 0xFF	; 255
 ec8:	71 f0       	breq	.+28     	; 0xee6 <__fp_splitA+0x1a>
 eca:	47 95       	ror	r20

00000ecc <__fp_splitA>:
 ecc:	88 0f       	add	r24, r24
 ece:	97 fb       	bst	r25, 7
 ed0:	99 1f       	adc	r25, r25
 ed2:	61 f0       	breq	.+24     	; 0xeec <__fp_splitA+0x20>
 ed4:	9f 3f       	cpi	r25, 0xFF	; 255
 ed6:	79 f0       	breq	.+30     	; 0xef6 <__fp_splitA+0x2a>
 ed8:	87 95       	ror	r24
 eda:	08 95       	ret
 edc:	12 16       	cp	r1, r18
 ede:	13 06       	cpc	r1, r19
 ee0:	14 06       	cpc	r1, r20
 ee2:	55 1f       	adc	r21, r21
 ee4:	f2 cf       	rjmp	.-28     	; 0xeca <__fp_split3+0xe>
 ee6:	46 95       	lsr	r20
 ee8:	f1 df       	rcall	.-30     	; 0xecc <__fp_splitA>
 eea:	08 c0       	rjmp	.+16     	; 0xefc <__fp_splitA+0x30>
 eec:	16 16       	cp	r1, r22
 eee:	17 06       	cpc	r1, r23
 ef0:	18 06       	cpc	r1, r24
 ef2:	99 1f       	adc	r25, r25
 ef4:	f1 cf       	rjmp	.-30     	; 0xed8 <__fp_splitA+0xc>
 ef6:	86 95       	lsr	r24
 ef8:	71 05       	cpc	r23, r1
 efa:	61 05       	cpc	r22, r1
 efc:	08 94       	sec
 efe:	08 95       	ret

00000f00 <__fp_zero>:
 f00:	e8 94       	clt

00000f02 <__fp_szero>:
 f02:	bb 27       	eor	r27, r27
 f04:	66 27       	eor	r22, r22
 f06:	77 27       	eor	r23, r23
 f08:	cb 01       	movw	r24, r22
 f0a:	97 f9       	bld	r25, 7
 f0c:	08 95       	ret

00000f0e <__mulsf3>:
 f0e:	0e 94 9a 07 	call	0xf34	; 0xf34 <__mulsf3x>
 f12:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__fp_round>
 f16:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fp_pscA>
 f1a:	38 f0       	brcs	.+14     	; 0xf2a <__mulsf3+0x1c>
 f1c:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fp_pscB>
 f20:	20 f0       	brcs	.+8      	; 0xf2a <__mulsf3+0x1c>
 f22:	95 23       	and	r25, r21
 f24:	11 f0       	breq	.+4      	; 0xf2a <__mulsf3+0x1c>
 f26:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__fp_inf>
 f2a:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__fp_nan>
 f2e:	11 24       	eor	r1, r1
 f30:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_szero>

00000f34 <__mulsf3x>:
 f34:	0e 94 5e 07 	call	0xebc	; 0xebc <__fp_split3>
 f38:	70 f3       	brcs	.-36     	; 0xf16 <__mulsf3+0x8>

00000f3a <__mulsf3_pse>:
 f3a:	95 9f       	mul	r25, r21
 f3c:	c1 f3       	breq	.-16     	; 0xf2e <__mulsf3+0x20>
 f3e:	95 0f       	add	r25, r21
 f40:	50 e0       	ldi	r21, 0x00	; 0
 f42:	55 1f       	adc	r21, r21
 f44:	62 9f       	mul	r22, r18
 f46:	f0 01       	movw	r30, r0
 f48:	72 9f       	mul	r23, r18
 f4a:	bb 27       	eor	r27, r27
 f4c:	f0 0d       	add	r31, r0
 f4e:	b1 1d       	adc	r27, r1
 f50:	63 9f       	mul	r22, r19
 f52:	aa 27       	eor	r26, r26
 f54:	f0 0d       	add	r31, r0
 f56:	b1 1d       	adc	r27, r1
 f58:	aa 1f       	adc	r26, r26
 f5a:	64 9f       	mul	r22, r20
 f5c:	66 27       	eor	r22, r22
 f5e:	b0 0d       	add	r27, r0
 f60:	a1 1d       	adc	r26, r1
 f62:	66 1f       	adc	r22, r22
 f64:	82 9f       	mul	r24, r18
 f66:	22 27       	eor	r18, r18
 f68:	b0 0d       	add	r27, r0
 f6a:	a1 1d       	adc	r26, r1
 f6c:	62 1f       	adc	r22, r18
 f6e:	73 9f       	mul	r23, r19
 f70:	b0 0d       	add	r27, r0
 f72:	a1 1d       	adc	r26, r1
 f74:	62 1f       	adc	r22, r18
 f76:	83 9f       	mul	r24, r19
 f78:	a0 0d       	add	r26, r0
 f7a:	61 1d       	adc	r22, r1
 f7c:	22 1f       	adc	r18, r18
 f7e:	74 9f       	mul	r23, r20
 f80:	33 27       	eor	r19, r19
 f82:	a0 0d       	add	r26, r0
 f84:	61 1d       	adc	r22, r1
 f86:	23 1f       	adc	r18, r19
 f88:	84 9f       	mul	r24, r20
 f8a:	60 0d       	add	r22, r0
 f8c:	21 1d       	adc	r18, r1
 f8e:	82 2f       	mov	r24, r18
 f90:	76 2f       	mov	r23, r22
 f92:	6a 2f       	mov	r22, r26
 f94:	11 24       	eor	r1, r1
 f96:	9f 57       	subi	r25, 0x7F	; 127
 f98:	50 40       	sbci	r21, 0x00	; 0
 f9a:	9a f0       	brmi	.+38     	; 0xfc2 <__mulsf3_pse+0x88>
 f9c:	f1 f0       	breq	.+60     	; 0xfda <__mulsf3_pse+0xa0>
 f9e:	88 23       	and	r24, r24
 fa0:	4a f0       	brmi	.+18     	; 0xfb4 <__mulsf3_pse+0x7a>
 fa2:	ee 0f       	add	r30, r30
 fa4:	ff 1f       	adc	r31, r31
 fa6:	bb 1f       	adc	r27, r27
 fa8:	66 1f       	adc	r22, r22
 faa:	77 1f       	adc	r23, r23
 fac:	88 1f       	adc	r24, r24
 fae:	91 50       	subi	r25, 0x01	; 1
 fb0:	50 40       	sbci	r21, 0x00	; 0
 fb2:	a9 f7       	brne	.-22     	; 0xf9e <__mulsf3_pse+0x64>
 fb4:	9e 3f       	cpi	r25, 0xFE	; 254
 fb6:	51 05       	cpc	r21, r1
 fb8:	80 f0       	brcs	.+32     	; 0xfda <__mulsf3_pse+0xa0>
 fba:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__fp_inf>
 fbe:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_szero>
 fc2:	5f 3f       	cpi	r21, 0xFF	; 255
 fc4:	e4 f3       	brlt	.-8      	; 0xfbe <__mulsf3_pse+0x84>
 fc6:	98 3e       	cpi	r25, 0xE8	; 232
 fc8:	d4 f3       	brlt	.-12     	; 0xfbe <__mulsf3_pse+0x84>
 fca:	86 95       	lsr	r24
 fcc:	77 95       	ror	r23
 fce:	67 95       	ror	r22
 fd0:	b7 95       	ror	r27
 fd2:	f7 95       	ror	r31
 fd4:	e7 95       	ror	r30
 fd6:	9f 5f       	subi	r25, 0xFF	; 255
 fd8:	c1 f7       	brne	.-16     	; 0xfca <__mulsf3_pse+0x90>
 fda:	fe 2b       	or	r31, r30
 fdc:	88 0f       	add	r24, r24
 fde:	91 1d       	adc	r25, r1
 fe0:	96 95       	lsr	r25
 fe2:	87 95       	ror	r24
 fe4:	97 f9       	bld	r25, 7
 fe6:	08 95       	ret

00000fe8 <_exit>:
 fe8:	f8 94       	cli

00000fea <__stop_program>:
 fea:	ff cf       	rjmp	.-2      	; 0xfea <__stop_program>
